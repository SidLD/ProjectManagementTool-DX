// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  password     String
  gender       Boolean?
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  projects     Project[] //sa Project kay pwede an user magkamayada damu na project
  team_member  TeamMember[]
  logs         Logs[]
  comments     Comment[]
  mentions     Mention[]
  notification Notification[]
}

model Role {
  id               String       @id @default(uuid())
  name             String
  project          Project      @relation(fields: [projectId], references: [id])
  projectId        String
  role_member      TeamMember[] //Need Manual disconnect
  role_permissions Permission[]
}

model Permission {
  id               String   @id @default(uuid())
  name             String
  label            String
  createdAt        DateTime @default(now())
  permission_roles Role[]
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  manager     User         @relation(fields: [managerId], references: [id])
  managerId   String
  startDate   DateTime?
  endDate     DateTime?
  progress    Float?       @default(0)
  tasks       Task[]
  teamMembers TeamMember[]
  roles       Role[]
}

enum TeamStatus {
  PENDING
  ACCEPTED
}

model TeamMember {
  id           String        @id @default(uuid())
  status       TeamStatus
  project      Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId    String?
  team_tasks   Task[] //Manually Disconnect this
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  role         Role?         @relation(fields: [roleId], references: [id], onDelete: SetNull)
  roleId       String?
  notification Notification?
}

model Task {
  id          String       @id @default(uuid())
  task        String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      Status
  task_member TeamMember[] //Manually Disconnect this
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String
  logs        Logs[]
  comments    Comment[]
}

enum Status {
  TO_DO
  IN_PROGRESS
  COMPLETED
}

model Logs {
  id        String   @id @default(uuid())
  detail    String?
  createdAt DateTime @default(now())
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  createdAt DateTime         @default(now())
  isRead    Boolean          @default(false)
  mention   Mention?        @relation(fields: [mentionId], references: [id])
  mentionId    String?       @unique
  team      TeamMember?      @relation(fields: [teamId], references: [id])
  teamId    String?          @unique
  comment   Comment?         @relation(fields: [commentId], references: [id])
  commentId String?          @unique
  user      User             @relation(fields: [userId], references: [id])
  userId    String           
}

enum NotificationType {
  MENTION
  REPLY
  INVITATION
}

model Mention {
  id             String        @id @default(uuid())
  comment        Comment?      @relation(fields: [commentId], references: [id])
  commentId      String?
  user          User?      @relation(fields: [userId], references: [id])
  userId      String?
  notification   Notification? 
}

model Comment {
  id              String        @id @default(uuid())
  detail          String?
  createdAt       DateTime      @default(now())
  mentions        Mention[]
  task            Task          @relation(fields: [taskId], references: [id])
  taskId          String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  childrenComment Comment[]     @relation("Comment_Children")
  parentComment   Comment?      @relation("Comment_Children", fields: [parentId], references: [id])
  parentId        String?
  notification    Notification?
}
